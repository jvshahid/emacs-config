\input texinfo
@c %**start of header
@setfilename doc/rinari.info
@settitle Rinari: Ruby on Rails Minor Mode

@set DATE July 2008

@dircategory Emacs
@direntry
* Rinari Minor Mode: (Rinari).      Ruby on Rails Framework Support
@end direntry

@c Version and Contact Info
@c @set MAINTAINERSITE @uref{http://orgmode.org,maintainers webpage}
@set AUTHOR Eric Schulte
@set MAINTAINER Eric Schulte
@set MAINTAINEREMAIL @email{schulte dot eric at gmail dot com}
@set MAINTAINERCONTACT @uref{mailto:schulte dot eric at gmail dot com,contact the maintainer}
@c %**end of header
@finalout

@copying
This manual is for Rinari.
(Modeled off of the very fine org-mode info documentation.)

Copyright @copyright{} 2008 Eric Schulte, 2006 - 2007 Phil Hagelberg,
Forrest Chang, Ryan Davis, Paul Stickne, and others

@end copying

@titlepage
@title Using Rinari

@subtitle Ruby on Rails Minor Mode
@author by Eric Schulte

@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c Output the table of contents at the beginning.
@contents

@ifnottex
@node Top, Introduction, (dir), (dir)
@top Rinari

@insertcopying
@end ifnottex

@b{Contents}

@menu
* Introduction::                Brief summary of what Rinari is (and isn't)
* Install::                     Installing Rinari in your Emacs
* Navigation::                  Jumping between files in your Rails project
* Test Driven Development::     Support for Test Driven Development
* Execution::                   Running tests, consoles, and web-servers
* Miscellaneous::               Leftover functions
* Bundles::                     Independently loadable extra functionality
@end menu

@b{Links}

@itemize
@item Latest versions available at
 @uref{http://github.com/eschulte/rinari/tree/master}
@item For an html version of this documentation see
 @uref{http://rinari.rubyforge.org/}
@item For information on the previous version of Rinari see
 @uref{http://rinari.rubyforge.org/old.html}
@end itemize

@node Introduction, Install, Top, Top
@chapter Introduction
@cindex introduction

@b{R}inari @b{I}s @b{N}ot @b{A} @b{R}uby @b{I}DE.

Well, ok it kind of is. Rinari is a set of Emacs Lisp functions aimed
towards making Emacs into a top-notch Ruby on Rails development
environment.

Currently Rinari focuses on the core functionality most everyone would
use when working on a Rails applications including...

@itemize
@item @emph{Navigation} between files in your Rails project (@pxref{Navigation})
@item Facilitation of @emph{Test Driven Development} (@pxref{Test Driven Development})
@item @emph{Execution} of tests, consoles, and web-servers (@pxref{Execution})
@end itemize

Rinari does not deal with syntax highlighting for rhtml files, while all
of the Rinari functions will be available from within your rhtml files
you are free to chose from the many stand-alone solutions for rhtml
major modes @pxref{Rhtml Setup}.

Following the lead of Dmitry Galinsky's suggestion for emacs-rails
additional pieces of functionality like snippets, or tools like rdebug
may be made available as modular Bundles @pxref{Bundles}, which would be
individually loaded.

See
@itemize
@item @uref{http://github.com/eschulte/rinari/tree/master} for the
latest versions
@item @uref{http://groups.google.com/group/emacs-on-rails} for
discussion of Emacs and Rails developments
@end itemize

@node Install, Basic Setup, Introduction, Top
@chapter Install
@cindex install

@b{Emacs}

Having a working copy and working knowledge of Emacs are definite
prerequisites for using Rinari.

@itemize
@item For information on obtaining and installing emacs see
@uref{www.gnu.org/software/emacs/} or
@uref{http://en.wikipedia.org/wiki/Emacs}.
@item If you are new to Emacs or any of the following doesn't make sense
to you, read through the Emacs tutorial.  To do so open Emacs and press
@code{C-ht} (meaning press the ``h'' key while holding down the ``Ctrl''
key and then press the ``t'' key).
@end itemize

@b{Rinari}

@menu
* Basic Setup::          The minimum required to get going with Rinari
* Rhtml Setup::          Select and setup a Major mode for rhtml files
* Optional Setup::       Some additional setup options
@end menu

The remainder of this document describes the functions, and environments
of Rinari, if you would rather just get started, then restart emacs, cd
into a Rails application in shell or eshell, or open up a file in a
Rails application.  To see all of the functions provided by rinari try
@code{C-hb} then search for rinari, or @code{M-x rinari-<tab>}.

@node Basic Setup, Rhtml Setup, Install, Install
@section Basic Setup
@cindex Basic Setup

The latest Rinari can be obtained from
@uref{http://github.com/eschulte/rinari/tree/master}.  Select the
``download'' button to grab an archive of the source code, or checkout a
copy using git with the command.

@example
git clone git://github.com/eschulte/rinari.git
@end example

Place the base rinari directory into your Emacs lisp directory. To
automatically load Rinari every time you open Emacs add these lines of
code to your .emacs file:

@lisp
  (add-to-list 'load-path "~/path/to/your/elisp/rinari")
  (require 'rinari)
  (global-set-key (kbd "C-x C-M-f") 'find-file-in-project) ;; optional
@end lisp

@node Rhtml Setup, Optional Setup, Basic Setup, Install
@section Rhtml Setup
@cindex Rhtml Setup

There are three options for editing .rhtml files in Emacs.  They are
presented here in order of decreasing functionality.

@menu
* nXhtml-Mode::           a package for web development
* MuMaMo-Mode::           allows multiple major modes in a single buffer
@end menu

For editing rhtml files without using multiple major modes see
@pxref{rhtml-Mode}

@node nXhtml-Mode, MuMaMo-Mode, Rhtml Setup, Rhtml Setup
@subsection nXhtml-Mode
@cindex nXhtml-Mode

nXhtml-Mode is a package for web development with Emacs.  For more
information see
@uref{http://www.emacswiki.org/cgi-bin/wiki/NxhtmlMode#toc1}.

To use nXhtml-Mode mode download it from
@uref{http://ourcomments.org/Emacs/nXhtml/doc/nxhtml.html}.  Then save
the resulting directory into your elisp directory and add the following
to your Emacs init file (replacing ``nxml-directory'' with the name of
your downloaded nxml directory).

@lisp
;;; nxml (HTML ERB template support)
(load "~/path/to/your/elisp/nxml-directory/autostart.el")

(setq
 nxhtml-global-minor-mode t
 mumamo-chunk-coloring 'submode-colored
 nxhtml-skip-welcome t
 indent-region-mode t
 rng-nxml-auto-validate-flag nil
 nxml-degraded t)
(add-to-list 'auto-mode-alist '("\\.html\\.erb\\'" . eruby-nxhtml-mumamo))
@end lisp

@node MuMaMo-Mode, , nXhtml-Mode, Rhtml Setup
@subsection MuMaMo-Mode
@cindex MuMaMo-Mode

MuMaMo-Mode allow @b{Mu}ltiple @b{Ma}jor @b{Mo}des in a single Emacs
buffer.  For more information see
@uref{http://www.emacswiki.org/cgi-bin/wiki/MuMaMo}.

MuMaMo-Mode comes bundles with nXhtml-Mode, so to install it download
nXhtml-Mode from
@uref{http://ourcomments.org/Emacs/nXhtml/doc/nxhtml.html}.  To use
MuMaMo-Mode when editing rhtml files, save the resulting directory into
your elisp directory, then add the following to your Emacs init file
(replacing ``nxml-directory'' with the name of your downloaded nxml
directory).

@lisp
;; MuMaMo-Mode for rhtml files
(add-to-list 'load-path "~/path/to/your/elisp/nxml-directory/util")
(require 'mumamo-fun)
(setq mumamo-chunk-coloring 'submode-colored)
(add-to-list 'auto-mode-alist '("\\.rhtml\\'" . eruby-html-mumamo))
(add-to-list 'auto-mode-alist '("\\.html\\.erb\\'" . eruby-html-mumamo))
@end lisp

@node Optional Setup, Navigation, Rhtml Setup, Install
@section Optional Setup
@cindex Optional Setup

@b{documentation}

To make and install the info documentation cd into @code{rinari}
directory and run the following rake command (you must have super user
privileges to install the info documentation).

@example
rake doc:install_info
@end example

To make an html version of the documentation cd into the @code{rinari}
directory and run the following rake command.

@example
rake doc:make_html
@end example

@b{ido-mode}

While ido-mode
@uref{http://www.emacswiki.org/cgi-bin/wiki/InteractivelyDoThings} is
not strictly required it is very helpfull in combination with many of
Rinari functions.  For more information about enabling ido-mode see the
link below, or to just go ahead and try it out add the following to your
emacs init file.

@lisp
;; Interactively Do Things
(require 'ido)
(ido-mode t)
@end lisp

@node Navigation, Test Driven Development, Optional Setup, Top
@chapter Navigation
@cindex navigation

Rinari leverages the structure of Rails projects to allow immediate
navigation between source files.  The following four commands use
information on the file and method you are current visiting to open the
appropriate model, controller, view or test file and method.

@defun rinari-find-model
Go to the most logical model given the current location.
@end defun

@defun rinari-find-controller
Go to the most logical controller given the current location.
@end defun

@defun rinari-find-view
Go to the most logical view given the current location.
@end defun

@defun rinari-find-test
Go to the most logical test given the current location.
@end defun

So for example if you are in a buffer open to @emph{foo_controller.rb},
a call to @code{rinari-find-model} will open the @emph{foo.rb} model
file.  Say you are currently inside the @emph{bar} method in a buffer
visiting @emph{foo_controller.rb}, then calling @code{rinari-find-test}
will take you to the @emph{test_bar} method in
@emph{test/functional/foo_controller_test.rb}, or calling
@code{rinari-find-view} will open @emph{app/views/foos/bar.rhtml}, the
bar method contains a redirect or render call in which case those will
be followed to find the correct view to display.

@node Test Driven Development, Execution, Navigation, Top
@chapter Test Driven Development
@cindex test driven development

Rinari facilitates a development style reliant upon unit and functional
tests by providing a single command @code{rinari-test} which executes
the unit or functional test related to the current method or buffer.
The results of the test are dumped into an emacs Compilation buffer
which allows jumping between error messages and the related source code.

@node Execution, Miscellaneous, Test Driven Development, Top
@chapter Execution
@cindex execution

Some Rails tools work better inside of emacs.  Specifically running rake
tasks, tests, console, the web-server, and browsing your SQL database.
Rinari provides functions for running all of these tools inside
specialized emacs buffers.

@defun rinari-rake
Tab completion selection of a rake task to execute with the output
dumped to a compilation buffer allowing jumping between errors and
source code.  With optional prefix argument allows editing of the rake
command.
@end defun

@defun rinari-console
"Run script/console in a compilation buffer, with command
history and links between errors and source code.  Use a prefix
argument to edit command line options."
@end defun

@defun rinari-sql
Browse the application's database.  Looks up login information from your
conf/database.sql file.
@end defun

@defun rinari-web-server
Run script/server.  Dump output to a compilation buffer allowing jumping
between errors and source code.
@end defun

@defun rinari-test
Test the current ruby function.  If current function is not a
test, then try to jump to the related test using `toggle-buffer'.
Dump output to a compilation buffer allowing jumping between
errors and source code.
@end defun

@node Miscellaneous, Bundles, Execution, Top
@chapter Miscellaneous
@cindex Miscellaneous

Miscellaneous functions...

@defun rinari-browse-url
Browse the url related to the current view, controller, test, or model
with `rinari-browse-url-func' which defaults to `browse-url'.
@end defun

@defun rinari-rgrep
Search through the rails project using `rgrep' for a string or `regexp'.
With optional prefix argument just run `rgrep'.
@end defun

@defun rinari-insert-erb-skeleton
Insert an erb skeleton at point, with optional prefix argument don't
include an '='.
@end defun

@node Bundles, rhtml-Mode, Miscellaneous, Top
@chapter Bundles
@cindex Bundles

Previous versions of both emacs-rails mode, and Rinari were very feature
rich, but bloated and cumbersome.  To avoid this Dmitry Galinsky (who I
believe is the author of emacs-rails) has suggested providing much of
this additional functionality as independent individual loadable bundles

If there is sufficient desire for such bundles or if @b{ideally} said
bundles are interoperable between emacs-rails and Rinari, they will be
listed here.

@menu
* rhtml-Mode::    Minor Mode for editing rhtml files (without MMM-Mode)
@end menu

@node rhtml-Mode, , Bundles, Bundles
@section rhtml-Mode
@cindex rhtml-Mode

@emph{rhtml-mode} is part of the original Rinari project.  It allows
editing of rhtml projects without having to use the often Flakey
MMM-Mode @uref{http://www.emacswiki.org/cgi-bin/wiki/MultipleModes}.
@emph{rhtml-mode} is presented here as an alternate option to
nxhtml-mode which doesn't work for many people.

To use @emph{rhtml-mode} for editing rhtml files, download the rhtml
directory from @uref{http://github.com/eschulte/rhtml/tree/master} and
place it in your elisp directory, then include the following in you
emacs .init file

@lisp
;;; rhtml-mode
(add-to-list 'load-path "~/path/to/your/elisp/rhtml")
(require 'rhtml-mode)
(add-hook 'rhtml-mode-hook
	  (lambda () (rinari-launch)))
@end lisp

@bye
